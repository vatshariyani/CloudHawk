#!/bin/bash

# CloudHawk Launch Script
# Easy deployment and management like OpenVAS

set -e

# Configuration
CLOUDHAWK_VERSION="2.0.0"
CLOUDHAWK_IMAGE="cloudhawk:latest"
CLOUDHAWK_CONTAINER="cloudhawk"
CLOUDHAWK_PORT=5000
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to print status
print_status() {
    echo -e "${GREEN}[CloudHawk]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[CloudHawk]${NC} $1"
}

print_error() {
    echo -e "${RED}[CloudHawk]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[CloudHawk]${NC} $1"
}

# Show banner
show_banner() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    CloudHawk v$CLOUDHAWK_VERSION                    ║"
    echo "║              Multi-Cloud Security Monitoring Tool           ║"
    echo "║                                                              ║"
    echo "║  🚀 Easy deployment and management like OpenVAS            ║"
    echo "║  🔒 Enterprise-grade cloud security monitoring             ║"
    echo "║  🤖 ML-based anomaly detection and behavioral analysis  ║"
    echo "║  📊 Real-time dashboard with advanced filtering             ║"
    echo "║  🌐 RESTful API with comprehensive documentation           ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Check if Docker is available
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed or not in PATH"
        echo "Please install Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running"
        echo "Please start Docker daemon and try again"
        exit 1
    fi
}

# Build CloudHawk image
build_image() {
    print_status "Building CloudHawk Docker image..."
    cd "$PROJECT_DIR"
    docker build -t $CLOUDHAWK_IMAGE .
    print_status "Docker image built successfully ✓"
}

# Start CloudHawk
start_cloudhawk() {
    print_status "Starting CloudHawk container..."
    
    # Stop existing container if running
    if docker ps -q -f name=$CLOUDHAWK_CONTAINER | grep -q .; then
        print_warning "Stopping existing CloudHawk container..."
        docker stop $CLOUDHAWK_CONTAINER
        docker rm $CLOUDHAWK_CONTAINER
    fi
    
    # Create necessary directories
    mkdir -p "$PROJECT_DIR/logs"
    mkdir -p "$PROJECT_DIR/config"
    mkdir -p "$PROJECT_DIR/data"
    
    # Start CloudHawk container
    docker run -d \
        --name $CLOUDHAWK_CONTAINER \
        --restart unless-stopped \
        -p $CLOUDHAWK_PORT:$CLOUDHAWK_PORT \
        -v "$PROJECT_DIR/logs:/opt/cloudhawk/logs" \
        -v "$PROJECT_DIR/config:/opt/cloudhawk/config" \
        -v "$PROJECT_DIR/data:/opt/cloudhawk/data" \
        -e CLOUDHAWK_PORT=$CLOUDHAWK_PORT \
        -e CLOUDHAWK_HOST=0.0.0.0 \
        -e PYTHONUNBUFFERED=1 \
        $CLOUDHAWK_IMAGE
    
    print_status "CloudHawk container started ✓"
}

# Wait for CloudHawk to be ready
wait_for_ready() {
    print_status "Waiting for CloudHawk to be ready..."
    
    max_attempts=30
    attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:$CLOUDHAWK_PORT/api/v1/health >/dev/null 2>&1; then
            print_status "CloudHawk is ready! ✓"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    print_error "CloudHawk failed to start within expected time"
    return 1
}

# Show access information
show_access() {
    echo -e "\n${GREEN}🎉 CloudHawk is now running!${NC}\n"
    
    echo -e "${BLUE}🌐 Web Interface:${NC}"
    echo "   🏠 Main Dashboard:     http://localhost:$CLOUDHAWK_PORT/"
    echo "   📊 Enhanced Dashboard: http://localhost:$CLOUDHAWK_PORT/enhanced-dashboard"
    echo "   📚 API Documentation:  http://localhost:$CLOUDHAWK_PORT/api/docs"
    echo "   ❤️  Health Check:      http://localhost:$CLOUDHAWK_PORT/api/v1/health"
    echo "   ⚠️  Alerts:            http://localhost:$CLOUDHAWK_PORT/alerts"
    echo "   🔧 Configuration:      http://localhost:$CLOUDHAWK_PORT/config"
    echo "   📋 Rules:              http://localhost:$CLOUDHAWK_PORT/rules"
    echo "   🔍 Security Scan:      http://localhost:$CLOUDHAWK_PORT/scan"
    
    echo -e "\n${BLUE}🔧 Management Commands:${NC}"
    echo "   View logs:    $0 logs"
    echo "   Stop:         $0 stop"
    echo "   Restart:      $0 restart"
    echo "   Status:       $0 status"
    echo "   Clean:        $0 clean"
    
    echo -e "\n${BLUE}📊 Features Available:${NC}"
    echo "   ✅ Multi-cloud security monitoring (AWS, Azure, GCP)"
    echo "   ✅ ML-based anomaly detection with behavioral analysis"
    echo "   ✅ Compliance reporting (SOC2, PCI-DSS, CIS benchmarks)"
    echo "   ✅ Real-time dashboard with advanced filtering and search"
    echo "   ✅ RESTful API with 20+ endpoints and Swagger documentation"
    echo "   ✅ Interactive visualizations and trend analysis"
    echo "   ✅ Webhook support for external integrations"
    
    echo -e "\n${GREEN}🚀 CloudHawk is ready for use!${NC}"
}

# Main deployment function
deploy() {
    show_banner
    check_docker
    build_image
    start_cloudhawk
    
    if wait_for_ready; then
        show_access
    else
        print_error "Deployment failed. Check logs with: $0 logs"
        exit 1
    fi
}

# Handle different commands
case "${1:-deploy}" in
    "deploy"|"start"|"run")
        deploy
        ;;
    "stop")
        print_status "Stopping CloudHawk..."
        docker stop $CLOUDHAWK_CONTAINER 2>/dev/null || true
        print_status "CloudHawk stopped ✓"
        ;;
    "restart")
        print_status "Restarting CloudHawk..."
        docker restart $CLOUDHAWK_CONTAINER 2>/dev/null || true
        if wait_for_ready; then
            show_access
        fi
        ;;
    "status")
        if docker ps -q -f name=$CLOUDHAWK_CONTAINER | grep -q .; then
            print_status "CloudHawk is running ✓"
            show_access
        else
            print_warning "CloudHawk is not running"
        fi
        ;;
    "logs")
        docker logs $CLOUDHAWK_CONTAINER
        ;;
    "shell")
        print_status "Opening CloudHawk container shell..."
        docker exec -it $CLOUDHAWK_CONTAINER /bin/bash
        ;;
    "clean")
        print_warning "This will remove CloudHawk container and image. Continue? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            print_status "Cleaning up CloudHawk..."
            docker stop $CLOUDHAWK_CONTAINER 2>/dev/null || true
            docker rm $CLOUDHAWK_CONTAINER 2>/dev/null || true
            docker rmi $CLOUDHAWK_IMAGE 2>/dev/null || true
            print_status "Cleanup completed ✓"
        else
            print_info "Cleanup cancelled"
        fi
        ;;
    "help"|"-h"|"--help")
        show_banner
        echo -e "${BLUE}Usage:${NC} $0 [command]"
        echo ""
        echo -e "${BLUE}Commands:${NC}"
        echo "  deploy, start, run  - Deploy and start CloudHawk (default)"
        echo "  stop                - Stop CloudHawk"
        echo "  restart             - Restart CloudHawk"
        echo "  status              - Show CloudHawk status"
        echo "  logs                - Show CloudHawk logs"
        echo "  shell               - Open CloudHawk container shell"
        echo "  clean               - Remove CloudHawk container and image"
        echo "  help                - Show this help message"
        echo ""
        echo -e "${BLUE}Examples:${NC}"
        echo "  $0                  # Deploy and start CloudHawk"
        echo "  $0 start            # Start CloudHawk"
        echo "  $0 logs             # View CloudHawk logs"
        echo "  $0 status           # Check CloudHawk status"
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Use '$0 help' for available commands"
        exit 1
        ;;
esac
