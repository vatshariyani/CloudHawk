version: '3.8'

services:
  cloudhawk:
    build: .
    container_name: cloudhawk
    ports:
      - "5000:5000"
    environment:
      - CLOUDHAWK_PORT=5000
      - CLOUDHAWK_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - cloudhawk_logs:/opt/cloudhawk/logs
      - cloudhawk_models:/opt/cloudhawk/src/detection/models
      - cloudhawk_alerts:/opt/cloudhawk/src/alerts
      - cloudhawk_config:/opt/cloudhawk/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cloudhawk_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cloudhawk.rule=Host(`cloudhawk.local`)"
      - "traefik.http.services.cloudhawk.loadbalancer.server.port=5000"

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cloudhawk_redis
    ports:
      - "6379:6379"
    volumes:
      - cloudhawk_redis:/data
    restart: unless-stopped
    networks:
      - cloudhawk_network
    command: redis-server --appendonly yes

  # Optional: PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: cloudhawk_postgres
    environment:
      - POSTGRES_DB=cloudhawk
      - POSTGRES_USER=cloudhawk
      - POSTGRES_PASSWORD=cloudhawk_secure_password
    ports:
      - "5432:5432"
    volumes:
      - cloudhawk_postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - cloudhawk_network

volumes:
  cloudhawk_logs:
    driver: local
  cloudhawk_models:
    driver: local
  cloudhawk_alerts:
    driver: local
  cloudhawk_config:
    driver: local
  cloudhawk_redis:
    driver: local
  cloudhawk_postgres:
    driver: local

networks:
  cloudhawk_network:
    driver: bridge