version: '3.8'

services:
  cloudhawk:
    # Use pre-built image from GitHub Container Registry
    image: ghcr.io/${GITHUB_REPOSITORY:-vatshariyani/cloudhawk}:latest
    container_name: cloudhawk
    ports:
      - "${CLOUDHAWK_PORT:-5000}:5000"
    environment:
      - CLOUDHAWK_PORT=${CLOUDHAWK_PORT:-5000}
      - CLOUDHAWK_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
      # AWS Configuration (set these via environment variables)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      # Azure Configuration (optional)
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      # GCP Configuration (optional)
      - GOOGLE_APPLICATION_CREDENTIALS=/opt/cloudhawk/config/gcp-credentials.json
    volumes:
      - cloudhawk_logs:/opt/cloudhawk/logs
      - cloudhawk_models:/opt/cloudhawk/src/detection/models
      - cloudhawk_alerts:/opt/cloudhawk/src/alerts
      - cloudhawk_config:/opt/cloudhawk/config
      # Mount your cloud credentials (optional)
      - ${AWS_CREDENTIALS_PATH:-./credentials}:/opt/cloudhawk/config/aws-credentials:ro
      - ${AZURE_CREDENTIALS_PATH:-./azure-credentials}:/opt/cloudhawk/config/azure-credentials:ro
      - ${GCP_CREDENTIALS_PATH:-./gcp-credentials.json}:/opt/cloudhawk/config/gcp-credentials.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cloudhawk_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cloudhawk.rule=Host(`${CLOUDHAWK_DOMAIN:-cloudhawk.local}`)"
      - "traefik.http.services.cloudhawk.loadbalancer.server.port=5000"

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cloudhawk_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - cloudhawk_redis:/data
    restart: unless-stopped
    networks:
      - cloudhawk_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

  # Optional: PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: cloudhawk_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cloudhawk}
      - POSTGRES_USER=${POSTGRES_USER:-cloudhawk}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cloudhawk_secure_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - cloudhawk_postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - cloudhawk_network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cloudhawk_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cloudhawk
    restart: unless-stopped
    networks:
      - cloudhawk_network

volumes:
  cloudhawk_logs:
    driver: local
  cloudhawk_models:
    driver: local
  cloudhawk_alerts:
    driver: local
  cloudhawk_config:
    driver: local
  cloudhawk_redis:
    driver: local
  cloudhawk_postgres:
    driver: local

networks:
  cloudhawk_network:
    driver: bridge
